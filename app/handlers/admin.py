from aiogram.types import Message
from aiogram import Bot, Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database.dao import get_all_users_id, get_count_users_last_days, get_count_events_by_day, get_avarage_count_events_by_users, clear_event
from filters.IsAdmin import IsAdmin
from sqlalchemy.ext.asyncio import AsyncSession

from common.kb_list import statistic_kb, admin_kb, start_kb


admin_router = Router()
admin_router.message.filter(IsAdmin())

class SendAll(StatesGroup):
    photo = State()
    message = State()
    
    
class GetUsersGain(StatesGroup):
    days = State()


@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    await message.answer("–í—ã –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_kb)
        
    
@admin_router.message(F.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é")
async def admin_back(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=start_kb)
    
    
@admin_router.message(F.text == "‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –∫ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
async def admin_back(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_kb)
    
    
# Statistic --------------------------------------------

@admin_router.message(F.text == "üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def admin_statistic(message: Message):
    await message.answer("üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", reply_markup=statistic_kb)


@admin_router.message(F.text == "–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
async def admin_statistic_users(message: Message, session: AsyncSession):
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–∏ÃÜ: " + str(len(await get_all_users_id(session))))
    
    
@admin_router.message(F.text == "–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏)")
async def admin_statistic_users_last_day(message: Message, session: AsyncSession, state: FSMContext):
    await state.clear()
    await state.set_state(GetUsersGain.days)
    await message.answer("–ó–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É? (–∫–æ–ª-–≤–æ –¥–Ω–µ–π)")
    
    
@admin_router.message(GetUsersGain.days, F.text)
async def admin_statistic_users_last_days(message: Message, session: AsyncSession, state: FSMContext):
    try:
        days = int(message.text)
    except:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        return
    await message.answer("–ü—Ä–∏—Ä–æ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–∏ÃÜ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ " + str(days) + " –¥–Ω—è/–¥–µ–Ω—å/–¥–Ω–µ–π: " + str(len(await get_count_users_last_days(session, days))))
    await state.clear()
    
    
@admin_router.message(F.text == "–ö–æ–ª-–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –¥–µ–Ω—å")
async def admin_statistic_active_day(message: Message, session: AsyncSession):
    await message.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –∑–∞ –¥–µ–Ω—å: " + str(len(await get_count_events_by_day(session))))
    
    
@admin_router.message(F.text == "–°—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞ –¥–µ–Ω—å)")
async def admin_statistic_active_day(message: Message, session: AsyncSession):
    avarage_activity_list = await get_avarage_count_events_by_users(session)
    avarage_activity = sum(avarage_activity_list) / len(avarage_activity_list)
    await message.answer("–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª-–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: " + str(avarage_activity))
    
    
@admin_router.message(F.text == "–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def admin_back(message: Message, session: AsyncSession):
    await clear_event(session)
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞")
    
    
# Send all --------------------------------------------

@admin_router.message(F.text == "üîâ–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def send_all(message: Message, state: FSMContext):
    await state.set_state(SendAll.photo)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–ª–∏–±–æ –≤–≤–µ–¥–∏—Ç–µ 'n', –µ—Å–ª–∏ –ø–æ—Å—Ç –±—É–¥–µ—Ç –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏)")
    
    
@admin_router.message(SendAll.photo)
async def send_all_photo(message: Message, state: FSMContext):
    try:
        await state.update_data(photo=message.photo[0].file_id)
    except:
        await message.answer("–ü–æ—Å—Ç –±—É–¥–µ—Ç –±–µ–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏")
        await state.update_data(photo=None)
    await state.set_state(SendAll.message)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    
@admin_router.message(SendAll.message)
async def send_all_message(message: Message, state: FSMContext, bot: Bot, session: AsyncSession):
    await state.update_data(message=message.text)
    message_data = await state.get_data()
    data = await get_all_users_id(session)
    print(data)
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å")
    if message_data["photo"] is None:
        for user_id in data:
            await bot.send_message(str(user_id), message_data["message"])
    else:
        for user_id in data:
            await bot.send_photo(str(user_id), message_data["photo"], caption=message_data["message"])
    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    await state.clear()